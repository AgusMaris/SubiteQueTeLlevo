// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubiteQueTeLlevo.Data;

namespace SubiteQueTeLlevo.Data.Migrations
{
    [DbContext(typeof(SQTLDbContext))]
    [Migration("20210218012654_AñoModelo")]
    partial class AñoModelo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Auto", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DueñoId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int");

                    b.Property<string>("Patente")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutoId");

                    b.HasIndex("DueñoId");

                    b.HasIndex("ModeloId");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.HasKey("CiudadId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Direccion", b =>
                {
                    b.Property<int>("DireccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("DireccionId");

                    b.HasIndex("CiudadId");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.EstadoViaje", b =>
                {
                    b.Property<int>("EstadoViajeId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoViajeId");

                    b.ToTable("EstadoViaje");

                    b.HasData(
                        new
                        {
                            EstadoViajeId = 0,
                            Nombre = "Pendiente"
                        },
                        new
                        {
                            EstadoViajeId = 1,
                            Nombre = "Cancelado"
                        },
                        new
                        {
                            EstadoViajeId = 2,
                            Nombre = "Completado"
                        });
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.EstadoViajePerfil", b =>
                {
                    b.Property<int>("EstadoViajePerfilId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoViajePerfilId");

                    b.ToTable("EstadoViajePerfil");

                    b.HasData(
                        new
                        {
                            EstadoViajePerfilId = 0,
                            Nombre = "Cancelado"
                        },
                        new
                        {
                            EstadoViajePerfilId = 1,
                            Nombre = "Completado"
                        },
                        new
                        {
                            EstadoViajePerfilId = 2,
                            Nombre = "PendienteAceptacion"
                        },
                        new
                        {
                            EstadoViajePerfilId = 3,
                            Nombre = "Reservado"
                        });
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarcaId");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Modelo", b =>
                {
                    b.Property<int>("ModeloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModeloId");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Perfil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ClasificacionPromedio")
                        .HasColumnType("real");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EsConductor")
                        .HasColumnType("bit");

                    b.Property<bool>("EsPasajero")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Provincia", b =>
                {
                    b.Property<int>("ProvinciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinciaId");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Viaje", b =>
                {
                    b.Property<int>("ViajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AsientosTotales")
                        .HasColumnType("int");

                    b.Property<int>("AutoId")
                        .HasColumnType("int");

                    b.Property<int?>("DestinoId")
                        .HasColumnType("int");

                    b.Property<bool>("DisponibilidadEquipaje")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoViajeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FyHSalida")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrigenId")
                        .HasColumnType("int");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<int>("TiempoEstimado")
                        .HasColumnType("int");

                    b.HasKey("ViajeId");

                    b.HasIndex("AutoId");

                    b.HasIndex("DestinoId");

                    b.HasIndex("EstadoViajeId");

                    b.HasIndex("OrigenId");

                    b.ToTable("Viajes");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.ViajePerfil", b =>
                {
                    b.Property<int>("ViajePerfilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EstadoViajePerfilId")
                        .HasColumnType("int");

                    b.Property<string>("PerfilId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViajeId")
                        .HasColumnType("int");

                    b.HasKey("ViajePerfilId");

                    b.HasIndex("EstadoViajePerfilId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("ViajeId");

                    b.ToTable("ViajePerfil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Auto", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", "Dueño")
                        .WithMany()
                        .HasForeignKey("DueñoId");

                    b.HasOne("SubiteQueTeLlevo.Data.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dueño");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Ciudad", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Direccion", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Modelo", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Viaje", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubiteQueTeLlevo.Data.Direccion", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId");

                    b.HasOne("SubiteQueTeLlevo.Data.EstadoViaje", "EstadoViaje")
                        .WithMany("Viajes")
                        .HasForeignKey("EstadoViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubiteQueTeLlevo.Data.Direccion", "Origen")
                        .WithMany()
                        .HasForeignKey("OrigenId");

                    b.Navigation("Auto");

                    b.Navigation("Destino");

                    b.Navigation("EstadoViaje");

                    b.Navigation("Origen");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.ViajePerfil", b =>
                {
                    b.HasOne("SubiteQueTeLlevo.Data.EstadoViajePerfil", "EstadoViajePerfil")
                        .WithMany("ViajePerfil")
                        .HasForeignKey("EstadoViajePerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubiteQueTeLlevo.Data.Perfil", "Perfil")
                        .WithMany("ViajePerfil")
                        .HasForeignKey("PerfilId");

                    b.HasOne("SubiteQueTeLlevo.Data.Viaje", "Viaje")
                        .WithMany("ViajePerfil")
                        .HasForeignKey("ViajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoViajePerfil");

                    b.Navigation("Perfil");

                    b.Navigation("Viaje");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.EstadoViaje", b =>
                {
                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.EstadoViajePerfil", b =>
                {
                    b.Navigation("ViajePerfil");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Perfil", b =>
                {
                    b.Navigation("ViajePerfil");
                });

            modelBuilder.Entity("SubiteQueTeLlevo.Data.Viaje", b =>
                {
                    b.Navigation("ViajePerfil");
                });
#pragma warning restore 612, 618
        }
    }
}
